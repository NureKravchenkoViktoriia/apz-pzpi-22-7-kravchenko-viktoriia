МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 


Кафедра «Програмна інженерія»
 



ЗВІТ
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечнння»
на тему «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРИСТРОЮ ІНТЕРНЕТУ РЕЧЕЙ (IOT) АБО РОЗУМНОГО ПРИСТРОЯ (SMART DEVICE) ПРОГРАМНОЇ СИСТЕМИ»
 


 
Виконала:                                                           	              	Прийняв:
ст. гр. ПЗПІ-22-7                                    	       	     		Сокорчук І.П.
Кравченко В. А.





Харків 2025
1 ІСТОРІЯ ЗМІН
     
     
№ДатаВерсія звітуОпис змін та виправлень131.05.20250.1Створено розділ «Історія змін», «Завдання»231.05.20250.1Створено розділ «Опис виконаної роботи»331.05.20250.1Створено «Додаток А», закінчено розділ «Додаток Б», «Додаток В» та «Висновки»     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
2 ЗАВДАННЯ


     На лабораторній роботі потрібно розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System). 
     Пристрій повинен бути частиною програмної системи і повинен взаємодіяти з нею. Програмне забезпечення повинно реалізовувати розширену функціональність, що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з іншими частинами системи. Протоколи взаємодії мають відповідати сучасним вимогам до IoT або SmartDevice. Для реалізації програмного забезпечення можна використовувати будь-які придатні для реалізації програмного забезпечення для вбудованих систем технології.















3 ОПИС ВИКОНАНОЇ РОБОТИ


     Розробка будови програмного забезпечення IoT клієнта:
     Будова програмного забезпечення IoT клієнта визначає його архітектуру, компоненти та взаємодію між ними. IoT клієнт буде збирати дані із сенсорів і передавати їх на сервер через REST API за допомогою протоколу HTTP.
     Архітектура буде складатися з наступних основних модулів:
     1. Модуль збору даних (Sensor Data Collection Module):
     • Зчитує дані з сенсорів, підключених до IoT пристрою (наприклад, витратоміра води).
     • Забезпечує регулярний або подієвий збір даних.
     2. Модуль обробки даних (Data Processing Module):
     • Перевіряє коректність зібраних даних (валідація).
     • Форматує дані для передачі на сервер (наприклад, у форматі JSON).
     3. Модуль передачі даних (Data Transmission Module):
     • Виконує передачу даних на сервер за допомогою HTTP запитів (REST API).
     4. Модуль конфігурації та управління (Configuration & Management Module):
     • Дозволяє налаштувати параметри пристрою (інтервал зчитування, URL сервера тощо).
     5. Модуль логування (Logging Module):
     • Зберігає інформацію про події (успішне зчитування даних, помилки, стан підключення).
     6. Модуль підключення до мережі (Network Connection Module):
     • Забезпечує підключення пристрою до Wi-Fi мережі.
     • Відслідковує стан мережі і перепідключається у разі втрати з’єднання.
     Опис модулів:
     1. Модуль збору даних (Sensor Data Collection Module):
     • Використовує бібліотеки для роботи з сенсорами (наприклад, бібліотека для витратоміра води).
     • Підтримує періодичне зчитування даних за заданим інтервалом.
     2. Модуль обробки даних (Data Processing Module):
     • Формує структуру даних.
     • Виконує базову перевірку (чи всі дані отримані).
     3. Модуль передачі даних (Data Transmission Module):
     • Виконує HTTP запити до REST API сервера.
     • Наприклад, здійснює POST запит з передачею даних.
     • Обробляє відповіді сервера (наприклад, статус коди 200 OK, 400 Bad Request тощо).
     4. Модуль конфігурації та управління (Configuration & Management Module):
     • Налаштовує такі параметри, як:
     o SSID і пароль Wi-Fi.
     o Інтервал зчитування даних.
     5. Модуль логування (Logging Module):
     • Записує події:
     o 2024-12-18 10:00: Data collected successfully
     o 2024-12-18 10:01: Failed to connect to server
     6. Модуль підключення до мережі (Network Connection Module):
     • Підключається до Wi-Fi, використовуючи SSID і пароль.
     • Відновлює з'єднання у разі втрати.
     Інтерфейси взаємодії:
З сервером:
     • Передача даних здійснюється через HTTP протокол.
     • REST API визначає, які кінцеві точки (endpoints) і методи доступні для клієнта.
     Послідовність роботи IoT клієнта:
     1. Ініціалізація:
     • Підключення до Wi-Fi.
     • Зчитування налаштувань.
     2. Збір даних:
     • Читання даних з сенсора.
     • Логування зібраних даних.
     3. Обробка даних:
     • Перевірка коректності даних.
     • Форматування у JSON.
     4. Передача даних:
     • Надсилання даних на сервер через HTTP.
     • Обробка відповіді сервера.
     5. Чекання:
     • Очікування перед наступним циклом збору даних.
     
     Для створення UML-діаграми прецедентів (рис.1) IoT клієнта у проєкті AquaTrack відобразимо основні взаємодії між користувачами (актором) та системою, а також функціональність, яку забезпечує IoT клієнт. 
     Компоненти діаграми:
     1. Актори:
     • IoT Клієнт – представляє пристрій, який збирає дані і взаємодіє із сервером.
     • Сервер AquaTrack – серверна частина системи, яка приймає дані від IoT клієнта.
     • Адміністратор – людина, яка керує пристроєм або перевіряє його роботу.
     2. Прецеденти (Use Cases):
     • Збір даних із сенсора: читання даних про споживання води.
     • Обробка даних: форматування даних для передачі.
     • Передача даних: надсилання даних на сервер через REST API.
     • Підключення до мережі: встановлення Wi-Fi з'єднання.
     • Оновлення конфігурації: зміна налаштувань пристрою (URL сервера, інтервал зчитування тощо).
     • Логування подій: збереження інформації про збої, помилки або успішні операції.
     3. Зв'язки:
     • Зв'язки між актором і прецедентами показують, які функції доступні для виконання.
     • Зв'язки між прецедентами відображають залежність функцій одна від одної.
     Опис сценаріїв використання:
     1. IoT Клієнт виконує такі дії:
     • Підключається до Wi-Fi.
     • Збирає дані із сенсорів.
     • Обробляє зібрані дані.
     • Передає дані на сервер через REST API.
     • Логує події.
     2. Сервер AquaTrack отримує дані через REST API і відповідає IoT клієнту статусом запиту.
     3. Адміністратор може:
     • Налаштовувати параметри пристрою.
     • Перевіряти логи роботи пристрою. 
   

Рисунок 1 – UML-діаграма прецедентів IoT клієнта.

     Бізнес-логіка — алгоритми, які обробляють дані, пов’язані з предметною областю (споживання води).
     Функції налаштування IoT клієнта — можливості конфігурації та адаптації пристрою для коректної роботи.
     Розробка бізнес-логіки:
     Бізнес-логіка стосується збору, обробки, аналізу та передачі даних про споживання води. Вона включає такі аспекти:
     1. Алгоритми обробки даних
     Завдання:
     • Зібрати дані із сенсора.
     • Перевірити валідність зібраних даних.
     • Виконати математичну обробку: підрахунок, агрегування або обчислення середнього значення.
     Приклад:
     • Вхідні дані: миттєві значення споживання води, зібрані кожні 10 хвилин.
     • Результат: середнє споживання води за день.
     Додаткові перевірки: перевірка негативних значень: Якщо сенсор передає від'ємне значення, потрібно проігнорувати це значення або зберегти у логах.
     2. Форматування даних
     Дані, що надсилаються на сервер, мають відповідати формату JSON.
     3. Агрегування
     Наприклад, якщо пристрій збирає дані щогодини, їх потрібно об’єднувати в середньодобові значення перед передачею на сервер.
     Функції налаштування IoT клієнта:
     Це функції, які дозволяють змінювати конфігурацію пристрою:
     • Змінювати URL сервера.
     • Встановлювати інтервал збору даних.
     • Оновлювати параметри Wi-Fi.
     1. Зміна URL сервера:
     IoT клієнт має дозволяти оновлювати адресу сервера, куди надсилаються дані.
     Алгоритм:
     1) Прийняти новий URL через CLI (або зчитати його із флеш-пам’яті).
     2) Зберегти новий URL у пам'яті пристрою.
     2. Налаштування інтервалу зчитування:
     Пристрій має зчитувати дані із сенсора через задані проміжки часу.
     Приклад:
     1) Інтервал: Кожні 10 хвилин.
     2) Збереження інтервалу в пам'ять:
     3. Налаштування Wi-Fi
     Це важлива функція для IoT пристроїв. Налаштування може виконуватись через:
     • Веб-інтерфейс.
     • CLI (консольні команди).
     Алгоритм:
     1) Прийняти SSID і пароль від користувача.
     2) Зберегти їх у флеш-пам’яті.
     3) Виконати спробу підключення до мережі.
     4. Логування
     Функція логування допомагає реєструвати події для діагностики:
     • Помилки з’єднання.
     • Системні збої.
     Висновок:
     Бізнес-логіка:
     • Збір даних із сенсора.
     • Валідація даних.
     • Агрегування та форматування.
     • Передача даних через REST API.
     Функції налаштування:
     • Зміна параметрів мережі (Wi-Fi).
     • Оновлення URL сервера та інтервалу зчитування.
     • Логування для діагностики.

     Діаграма діяльності для IoT клієнта (рис.2) дозволяє візуалізувати робочий процес роботи пристрою, його основні задачі (збір даних, їх обробка, передача на сервер тощо) і алгоритм виконання функцій. 
     1. Визначення основних процесів:
     Для IoT клієнта основні процеси:
     1) Ініціалізація пристрою:
     • Підключення до Wi-Fi.
     • Зчитування конфігурації (URL сервера, інтервал зчитування тощо).
     2) Збір даних:
     • Читання показників сенсора.
     • Валідація отриманих даних.
     3) Обробка даних:
     • Форматування даних у потрібний формат (JSON).
     • Агрегування даних (середнє значення, загальне споживання).
     4) Передача даних:
     • Надсилання даних на сервер через REST API.
     • Обробка відповіді від сервера.
     5) Логування подій:
     • Запис помилок або результатів передачі у лог-файл.
     2. Опис сценарію
     1) Пристрій запускається та підключається до мережі Wi-Fi.
     2) Читаються конфігурації для з'єднання (інтервал збору, URL сервера).
     3) У циклі:
     • Зчитуються дані сенсора.
     • Дані перевіряються на валідність.
     • У разі успіху обробляються та передаються на сервер.
     • У разі невдачі записується лог про помилку.
     4) Чекається до наступного інтервалу.

Рисунок 2 – Діаграма діяльності для IoT клієнта

     Створення діаграми взаємодії для IoT клієнта. Показати загальний сценарій роботи IoT-клієнта у системі AquaTrack через послідовність окремих взаємодій (включаючи ініціалізацію, збирання даних, обробку, надсилання, логування тощо), пов’язаних з сервером та адміністратором.
     Структура діаграми: ключові interaction nodes
Interaction NodeОпис діїІніціалізація Wi-FiВстановлення з'єднання з мережею Wi-Fi.Завантаження конфігураціїОтримання налаштувань: інтервал зчитування, URL сервера тощо.Збір даних із сенсораОтримання показників споживання води.Перевірка валідностіПеревірка правильності/достовірності отриманих даних.Обробка данихФорматування у JSON, агрегація.Надсилання на серверВідправка даних через REST API.Отримання відповіді сервераОтримання підтвердження або помилки.Логування подіїЗапис результату (успіх/помилка) до журналу логів.Очікування наступного циклуПауза до наступного запуску згідно інтервалу.

Рисунок 3 – Діаграма взаємодії для IoT клієнта.
     Діаграма станів (State Diagram) — це тип поведінкової діаграми UML, що показує усі можливі стани об’єкта протягом його "життя" та події, що спричиняють переходи між цими станами.
     Основні стани системи (States)
СтанОписОчікування запускуСтан, у якому пристрій чекає включення живлення або тригера запуску.Підключення до Wi-FiАктивна спроба встановити з'єднання з мережею.Завантаження конфігураціїОтримання параметрів із сервера або локального сховища.Очікування часу зборуОчікує, поки не настане час збору даних.Збір данихЗчитування інформації із сенсорів (наприклад, лічильника води).Перевірка валідностіПеревірка чи є дані допустимими.Обробка данихПідготовка (наприклад: форматування, обрахунки).Надсилання данихВідправка на сервер.Отримання відповідіОбробка відповіді (успішно/невдача).Логування помилкиУ разі невалідних даних або помилки надсилання.Очікування наступного циклуЗатримка до наступного зчитування.     

Рисунок 4 – Діаграма станів для IoT клієнта.
     
     Архітектура IoT-клієнта:
     IoT-клієнт побудовано на основі модульного підходу, що дозволяє зручно розділити функціональність системи на окремі компоненти:
     Модуль налаштування Wi-Fi: забезпечує можливість користувачу вказати параметри бездротової мережі, до якої буде підключений пристрій.
     Функції:
     • Запит у користувача SSID (ім'я Wi-Fi-мережі) та пароль.
     • Перевірка введених даних на коректність (непорожні значення).
     • Збереження конфігурації для подальшого використання.
     Алгоритм роботи:
     1. Показати користувачу запит на введення SSID і пароля.
     2. Якщо дані некоректні (порожні або містять заборонені символи), запропонувати повторне введення.
     3. Успішно збережені дані передаються до інших модулів для підключення до мережі.
     Переваги:
     • Забезпечує динамічне налаштування пристрою для будь-якої мережі.
     • Використовується для інтеграції пристрою в локальну інфраструктуру.
     
     Модуль адміністрування: дозволяє вводити ідентифікатор пристрою, який використовується для його ідентифікації в системі.
     Функції:
     • Запит у користувача унікального ідентифікатора (Device ID).
     • Перевірка коректності введених даних (тільки числові значення).
     • Використання Device ID для передачі даних на сервер.
     Алгоритм роботи:
     1. Відобразити запит на введення Device ID.
     2. Якщо користувач не вводить значення, використовується ідентифікатор за замовчуванням (1).
     3. Збережений Device ID використовується як ключ для зв’язку з сервером.
     Переваги:
     • Гарантує унікальність пристрою в системі.
     • Легко масштабується для використання кількох пристроїв.
     
     Модуль збору даних: симулює отримання інформації про споживання води.
     Функції:
     • Генерація даних, які імітують показники споживання води.
     • Можливість підключення фізичного сенсора у майбутньому.
     Алгоритм роботи:
     1. Генерація випадкового числа в межах реального споживання води (наприклад, від 0 до 100 літрів).
     2. Збереження даних у буфер або передача їх на обробку.
     Переваги:
     • Дозволяє тестувати систему без фізичних сенсорів.
     • Може бути легко замінений реальним модулем збору даних.
     
     Модуль обробки даних: реалізує бізнес-логіку, яка включає попередню обробку (фільтрацію шумів) та аналіз на виявлення аномалій у споживанні води.
     Функції:
     • Фільтрація шумів у даних (наприклад, видалення 5% помилкових значень).
     • Аналіз даних на виявлення аномалій (наприклад, перевищення допустимого ліміту споживання).
     Алгоритм роботи:
     1. Дані надходять із модуля збору.
     2. Виконується попередня обробка (наприклад, відсіювання занадто малих чи великих значень).
     3. Перевірка на аномалії:
     o Якщо виявлено перевищення, формується попередження.
     4. Підготовка оброблених даних для передачі на сервер.
     Переваги:
     • Мінімізує вплив помилкових даних.
     • Забезпечує раннє виявлення потенційних проблем.
     
     Модуль передачі даних: забезпечує надсилання зібраної інформації на сервер. Дані перед відправкою зберігаються у буфері.
     Функції:
     • Буферизація даних: якщо сервер недоступний, дані зберігаються для повторної спроби.
     • Надсилання даних у форматі JSON через HTTP-запити.
     • Обробка помилок передачі.
     Алгоритм роботи:
     1. Отримання оброблених даних із модуля обробки.
     2. Спроба передачі даних на сервер через HTTP POST.
     3. У разі помилки дані залишаються в буфері.
     4. Періодична повторна спроба передачі даних.
     Переваги:
     • Забезпечує надійну передачу навіть у разі тимчасових проблем із сервером.
     • Легко інтегрується з іншими модулями серверної системи.
     
     Модуль логування: відповідає за збереження усіх подій роботи клієнта у вигляді журналу.
     Функції:
     • Логування усіх подій роботи клієнта (помилки, статуси, попередження).
     • Збереження журналу у вигляді текстового файлу для аналізу.
     Алгоритм роботи:
     1. Всі події (успішні або помилкові) записуються у журнал із зазначенням часу.
     2. У разі виникнення помилки додається відповідний опис.
     3. Журнал регулярно очищується, щоб уникнути переповнення.
     Переваги:
     • Полегшує діагностику роботи пристрою.
     • Дає змогу аналізувати історію подій для оптимізації роботи.
     
     Загальна схема взаємодії модулів:
     1. Налаштування: модуль Wi-Fi та адміністрування збирають початкові параметри.
     2. Збір даних: модуль збору даних отримує показники.
     3. Обробка даних: дані передаються на обробку для фільтрації шумів і аналізу.
     4. Передача даних: підготовлені дані надсилаються на сервер.
     5. Логування: усі дії (успіх чи помилки) фіксуються у журналі.
     Архітектура IoT-клієнта є гнучкою та легко адаптується для інтеграції з іншими системами.
     
     Бізнес-логіка:
     Бізнес-логіка IoT-клієнта реалізує основні функціональні аспекти роботи пристрою, зокрема збір, обробку та передачу даних. Нижче наведено детальне пояснення кожного з етапів.
     Бізнес-логіка включає наступні аспекти:
     1. Збір даних: пристрій генерує випадкові дані про споживання води (імітація роботи реального сенсора).
     Ключові аспекти:
     • Симуляція: оскільки немає фізичного сенсора, використовується генерація випадкових даних.
     • Реалістичність: випадкові значення обираються в межах очікуваного споживання (наприклад, 0–100 літрів на певний проміжок часу).
     Алгоритм роботи:
     1) Генерація даних:
public double CollectData()
{
    // Симуляція збору даних (вимірювання витрати води)
    return Math.Round(_random.NextDouble() * 100, 2); // Витрати води від 0 до 100 літрів
}
     2) Перевірка значень:
     o Якщо згенеровані дані поза межами очікуваних значень, вони ігноруються.
     o Наприклад, якщо значення дорівнює нулю або перевищує 100 літрів, це може вказувати на помилку.
     Результат:
     Зібрані дані передаються на обробку.
     
     2. Обробка даних:
     o Видалення шумів (5% від отриманих даних).
     o Аналіз аномальних ситуацій (наприклад, споживання понад 90 літрів).
     Призначення: підготувати отримані дані до передачі на сервер, зокрема видалити «шум» і провести аналіз на аномалії.
     2.1 Видалення шумів
     Шуми — це помилкові або некоректні значення, які можуть спотворити аналіз даних.
     • Процес:
     1) Дані сортуються.
Відсікаються 5% найнижчих і 5% найвищих значень.
// Обробка: видалення шумів 
var filteredData = Math.Max(sensorData - (sensorData * 0.05), 0);

     • Мета: залишити тільки значення, що відповідають реальному споживанню.
     2.2 Аналіз аномальних ситуацій
     Аномалії — це ситуації, коли споживання води перевищує допустимий ліміт.
     Приклад: якщо пристрій виявляє споживання понад 90 літрів за одиницю часу, це сигнал про можливу несправність або перевитрату.
// Аналіз: оцінка аномалій 
if (filteredData > 90)
{
    Console.WriteLine("Warning: High water consumption detected!");
}

return Math.Round(filteredData, 2);
     
     • Мета: виявити потенційні проблеми на ранніх етапах.
     Результат:
     Після обробки дані очищуються від шумів і позначаються, якщо виявлено аномалії. Ці дані готові до передачі.
     
     3. Передача даних: пристрій буферизує дані перед надсиланням. У разі помилок передачі дані залишаються в буфері для повторної спроби.
     Призначення: забезпечити надійну передачу зібраної інформації на сервер, навіть у разі помилок мережі.
     3.1 Буферизація даних
     • Якщо сервер тимчасово недоступний, дані зберігаються в локальному буфері.
     3.2 Передача даних
     • HTTP-запит: зібрані дані відправляються на сервер через HTTP POST у форматі JSON.
     • Формат JSON:
     {
         "deviceId": "12345",
         "waterConsumption": 85.7,
         "timestamp": "2024-12-19T10:00:00Z"
     }
     3.3 Обробка помилок
     • У разі невдалої спроби передати дані вони залишаються у буфері.
     • Клієнт автоматично повторює спробу через визначений проміжок часу.
     Результат бізнес-логіки:
     1. Збір даних: зібрані дані про споживання води.
     2. Обробка даних: очищені дані, готові для аналізу.
     3. Передача даних: надійно передаються на сервер, навіть у разі тимчасових збоїв.
     Ця бізнес-логіка забезпечує високу точність обробки та передачі даних, гнучкість у роботі з мережею і можливість раннього виявлення аномалій.
     
     Перед початком роботи пристрою користувач:
     1. Налаштовує Wi-Fi, вказуючи SSID і пароль.
     2. Задає ідентифікатор пристрою.
     Ці етапи гарантують персоналізовану роботу пристрою та можливість його інтеграції в локальну мережу.
     Надійність:
     • Перевірка введених даних: SSID, пароля, ідентифікатора пристрою.
     • Буферизація даних: якщо сервер тимчасово недоступний, дані не губляться, а залишаються в буфері.
     • Журналювання: усі події зберігаються у лог-файлі, що спрощує діагностику роботи клієнта.
     Фрагменти створеного програмного коду:
     Бізнес-логіка: Обробка даних (DataProcessingModule)
using System;

public class DataProcessingModule
{
    public double AnalyzeData(double sensorData)
    {
        if (sensorData < 0)
            throw new ArgumentException("Invalid sensor data");

        // Обробка: видалення шумів 
        var filteredData = Math.Max(sensorData - (sensorData * 0.05), 0);

        // Аналіз: оцінка аномалій 
        if (filteredData > 90)
        {
            Console.WriteLine("Warning: High water consumption detected!");
        }

        return Math.Round(filteredData, 2);
    }
}
     
     Пояснення:
     1) Метод AnalyzeData приймає параметр sensorData (виміряне сенсором споживання води).
     2) Якщо значення негативне – викидається виняток.
     3) Видаляються шуми: з початкового значення віднімається 5%.
     4) Виявляються аномалії: якщо після обробки значення перевищує 90, виводиться попередження.
     5) Повертається округлене значення, яке буде використане для передачі на сервер.
     Налаштування IoT-клієнта:
     WiFiConfigurationModule.cs:
using System;

public class WiFiConfigurationModule
{
    public string SSID { get; private set; }
    public string Password { get; private set; }

    public void ConfigureWiFi()
    {
        Console.WriteLine("Wi-Fi Configuration:");

        Console.Write("Enter Wi-Fi SSID: ");
        SSID = Console.ReadLine();

        Console.Write("Enter Wi-Fi Password: ");
        Password = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(SSID) || string.IsNullOrWhiteSpace(Password))
        {
            Console.WriteLine("Wi-Fi configuration failed: SSID or Password is empty. Please retry.");
            ConfigureWiFi();
        }
        else
        {
            Console.WriteLine($"Wi-Fi configured. SSID: {SSID}");
        }
    }
}
     
     Пояснення:
     1) Метод ConfigureWiFi запитує у користувача SSID (ім'я мережі) та пароль.
     2) Перевіряється, чи введені значення. Якщо значення порожні, метод викликається рекурсивно для повторного введення.
     3) Успішне налаштування підтверджується повідомленням.
     AdminModule.cs:
using System;

public class AdminModule
{
    public int GetDeviceId()
    {
        Console.WriteLine("Device Configuration:");

        Console.Write("Enter Device ID (default is 1): ");
        var input = Console.ReadLine();

        return int.TryParse(input, out var deviceId) && deviceId > 0 ? deviceId : 1;
    }
}
     
     Пояснення:
     1) Метод GetDeviceId запитує у користувача ідентифікатор пристрою.
     2) Якщо введене значення не є позитивним числом, використовується значення за замовчуванням (1).
     ConfigurationModule.cs:
public class ConfigurationModule
{
    public string ServerUrl { get; set; }
    public int DataCollectionInterval { get; set; } // Інтервал збору даних у секундах

    public ConfigurationModule(string serverUrl, int dataCollectionInterval)
    {
        ServerUrl = serverUrl;
        DataCollectionInterval = dataCollectionInterval;
    }
}
     
     Пояснення:
     1) Зберігає URL сервера (ServerUrl) і інтервал збору даних (DataCollectionInterval).
     2) Ці значення використовуються для передачі даних на сервер і налаштування частоти запитів.
     

























4 ВИСНОВКИ


     В рамках цієї роботи було розроблено IoT-клієнт для програмної системи AquaTrack, що забезпечує моніторинг споживання води в режимі реального часу. Розроблено модульну архітектуру IoT-клієнта, що складається з окремих компонентів (збір даних, обробка, передача, налаштування тощо). Такий підхід забезпечує простоту розширення та підтримки коду. Було впроваджено симуляцію збору даних, обробку отриманих показників (видалення шумів, аналіз аномалій) та організовано надійний механізм передачі даних на сервер. Використання буферизації гарантує збереження даних навіть у разі збоїв мережі. IoT-клієнт успішно виконує всі функції — від збору даних до їхньої передачі на сервер. Була перевірена коректність обробки даних і робота буферизації в умовах симуляції мережевих помилок.















ДОДАТОК А


     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/LRy0j9Uua9I
     Хронологічний опис відеозапису:
     00:00 – Вступ. 
     00:30 – Перевірка функцій налаштування IoT-клієнта. 
     02:03 – Перевірка бізнес-логіки. 
     02:58 – Збережені дані з IoT-клієнта у базі даних. 
     03:13 – Висновок. 



















ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 – UML-діаграма прецедентів IoT клієнта.

Рисунок Б.2 – Діаграма діяльності для IoT клієнта

Рисунок Б.3 – Діаграма взаємодії для IoT клієнта.

Рисунок Б.4 – Діаграма станів для IoT клієнта.




ДОДАТОК В
Програмний код
     В.1 AdminModule
 1  using System;
 2 
 3  public class AdminModule
 4  {
 5      public int GetDeviceId()
 6      {
 7          Console.WriteLine("Device Configuration:");
 8
 9          Console.Write("Enter Device ID (default is 1): ");
10          var input = Console.ReadLine();
11 
12          return int.TryParse(input, out var deviceId) && deviceId > 0 ? deviceId : 13  1;
14     }
15  }
     
     В.2 ConfigurationModule
 1  public class ConfigurationModule
 2  {
 3      public string ServerUrl { get; set; }
 4      public int DataCollectionInterval { get; set; } // Інтервал збору даних у  секундах
 5      public ConfigurationModule(string serverUrl, int dataCollectionInterval)
 6      {
 7          ServerUrl = serverUrl;
 8          DataCollectionInterval = dataCollectionInterval;
 9      }
10  }

     
     В.3 DataProcessingModule
 1  using System;
 2  
 3  public class DataProcessingModule
 4  {
 5      public double AnalyzeData(double sensorData)
 6      {
 7          if (sensorData < 0)
 8              throw new ArgumentException("Invalid sensor data");
 9  
10          // Обробка: видалення шумів 
11          var filteredData = Math.Max(sensorData - (sensorData * 0.05), 0);
12
13          // Аналіз: оцінка аномалій 
14          if (filteredData > 90)
15        {
16              Console.WriteLine("Warning: High water consumption detected!");
17          }
18
19          return Math.Round(filteredData, 2);
20      }
21  }
     
     В.4 DataTransmissionModule
 1  using Newtonsoft.Json;
 2  using System;
 3  using System.Collections.Generic;
 4  using System.Net.Http;
 5  using System.Text;
 6  using System.Threading.Tasks;
 7  
 8  public class DataTransmissionModule
 9  {
10    private static readonly HttpClient _httpClient = new HttpClient();
11    private string _serverUrl;
12    private Queue<object> _buffer; // Буфер для тимчасового зберігання даних
13  
14    public DataTransmissionModule(string serverUrl)
15    {
16      _serverUrl = serverUrl;
17      _buffer = new Queue<object>();
18    }
19  
20    public void BufferData(int deviceId, double waterConsumption)
21    {
22      var jsonData = new
23      {
24        DeviceId = deviceId,
25        UsageValue = waterConsumption,
26        Timestamp = DateTime.UtcNow
27      };
28  
29      _buffer.Enqueue(jsonData);
30    }
31  
32    public async Task<bool> SendBufferedDataAsync()
33    {
34      while (_buffer.Count > 0)
35      {
36        var data = _buffer.Dequeue();
37        var content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");
38  
39        try
40        {
41          var response = await _httpClient.PostAsync($"{_serverUrl}/api/iot-devices/collect-data", content);
42  
43          if (!response.IsSuccessStatusCode)
44          {
45            Console.WriteLine($"Failed to send buffered data. Status code: {response.StatusCode}");
46            _buffer.Enqueue(data); // Повертаємо дані у буфер
47            return false;
48          }
49        }
50        catch (Exception ex)
51        {
52          Console.WriteLine($"Error sending buffered data: {ex.Message}");
53          _buffer.Enqueue(data); // Повертаємо дані у буфер
54          return false;
55        }
56      }
57  
58      return true;
59    }
60  }
     
     В.5 LoggingModule
 1  using System;
 2  using System.IO;
 3  
 4  public class LoggingModule
 5  {
 6    private string _logFilePath = "iot_log.txt";
 7  
 8    public void Log(string message)
 9    {
10      Console.WriteLine(message); // Вивести в консоль
11  
12      // Запис у файл
13      File.AppendAllText(_logFilePath, $"{DateTime.Now}: {message}\n");
14    }
15  }
     
     В.6 Program
 1  using System;
 2  using System.Threading.Tasks;
 3  
 4  class Program
 5  {
 6    static async Task Main(string[] args)
 7    {
 8      // Ініціалізація модулів
 9      var loggingModule = new LoggingModule();
10      var wifiConfigModule = new WiFiConfigurationModule();
11      var adminModule = new AdminModule();
12      var config = new ConfigurationModule("http://localhost:5000", 10); // Серверний URL і інтервал
13      var sensorDataModule = new SensorDataCollectionModule();
14      var dataProcessingModule = new DataProcessingModule();
15      var dataTransmissionModule = new DataTransmissionModule(config.ServerUrl);
16  
17      loggingModule.Log("IoT client starting...");
18  
19      // Крок 1: Налаштування Wi-Fi
20      loggingModule.Log("Starting Wi-Fi configuration...");
21      wifiConfigModule.ConfigureWiFi();
22  
23      // Крок 2: Вибір пристрою
24      loggingModule.Log("Starting device configuration...");
25      var deviceId = adminModule.GetDeviceId();
26      loggingModule.Log($"Device ID set to {deviceId}");
27  
28      // Головний цикл роботи клієнта
29      while (true)
30      {
31        try
32        {
33          // Збір даних
34          var waterConsumption = sensorDataModule.CollectData();
35          loggingModule.Log($"Collected raw data: {waterConsumption} liters");
36  
37          // Обробка даних
38          var processedData = dataProcessingModule.AnalyzeData(waterConsumption);
39          loggingModule.Log($"Processed data: {processedData} liters (after analysis)");
40  
41          // Буферизація даних перед передачею
42          dataTransmissionModule.BufferData(deviceId, processedData);
43  
44          // Періодичне надсилання даних
45          var result = await dataTransmissionModule.SendBufferedDataAsync();
46          if (!result)
47          {
48            loggingModule.Log("Failed to send data.");
49          }
50        }
51        catch (Exception ex)
52        {
53          loggingModule.Log($"Error: {ex.Message}");
54        }
55  
56        // Очікування перед наступним циклом збору даних
57        await Task.Delay(config.DataCollectionInterval * 1000);
58      }
59    }
60  }
     
     В.7 SensorDataCollectionModule
 1  using System;
 2  
 3  public class SensorDataCollectionModule
 4  {
 5    private Random _random;
 6  
 7    public SensorDataCollectionModule()
 8    {
 9      _random = new Random();
10    }
11  
12    public double CollectData()
13    {
14      // Симуляція збору даних (вимірювання витрати води)
15      return Math.Round(_random.NextDouble() * 100, 2); // Витрати води від 0 до 100 літрів
16    }
17  }
     
     В.8 WiFiConfigurationModule
 1  using System;
 2  
 3  public class WiFiConfigurationModule
 4  {
 5    public string SSID { get; private set; }
 6    public string Password { get; private set; }
 7  
 8    public void ConfigureWiFi()
 9    {
10      Console.WriteLine("Wi-Fi Configuration:");
11  
12      Console.Write("Enter Wi-Fi SSID: ");
13      SSID = Console.ReadLine();
14  
15      Console.Write("Enter Wi-Fi Password: ");
16      Password = Console.ReadLine();
17  
18      if (string.IsNullOrWhiteSpace(SSID) || string.IsNullOrWhiteSpace(Password))
19      {
20        Console.WriteLine("Wi-Fi configuration failed: SSID or Password is empty. Please retry.");
21        ConfigureWiFi();
22      }
23      else
24      {
25        Console.WriteLine($"Wi-Fi configured. SSID: {SSID}");
26      }
27    }
28  }
     
