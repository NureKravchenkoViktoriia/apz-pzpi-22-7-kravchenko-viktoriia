МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 


Кафедра «Програмна інженерія»
 



ЗВІТ
з лабораторної роботи №5
з дисципліни «Архітектура програмного забезпечення»
на тему «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРОГРАМНОГО ЗАСТОСУНКУ МОБІЛЬНОГО ПРИСТРОЮ ДЛЯ ПРОГРАМНОЇ СИСТЕМИ»
 


 
Виконала:                                                           	              	Прийняв:
ст. гр. ПЗПІ-22-7                                    	       	     		Сокорчук І.П.
Кравченко В. А.





Харків 2025
1 ІСТОРІЯ ЗМІН
     
     
№ДатаВерсія звітуОпис змін та виправлень107.06.20250.1Створено розділ «Історія змін», «Завдання»208.06.20250.1Створено розділ «Опис виконаної роботи»308.06.20250.1Створено «Додаток А», закінчено розділ «Додаток Б», «Додаток В» та «Висновки»     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
2 ЗАВДАННЯ


     Мобільний застосунок повинен бути частиною системи і повинен взаємодіяти з нею. Для реалізації програмного застосунку можна використовувати технології для реалізації програмного забезпечення для мобільних платформ, вказані лектором.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
3 ОПИС ВИКОНАНОЇ РОБОТИ


     Мобільний застосунок програмної системи контролю споживання води у приміщенні реалізовано з використанням архітектурного шаблону MVVM (Model–View–ViewModel), що забезпечує розділення відповідальностей між компонентами інтерфейсу користувача, логікою обробки даних та доступом до джерел даних. Такий підхід підвищує підтримуваність, масштабованість та тестованість програмного коду.
     Архітектура мобільного застосунку включає такі основні компоненти:
     • Model – відповідає за роботу з даними. У цій частині реалізовано класи даних (data classes), моделі лімітів та показників споживання води.
     • View – реалізує інтерфейс користувача. У даному застосунку View представлена фрагментами (MonitoringFragment, LimitFragment) та активністю UserActivity. 
     • ViewModel – виступає посередником між View і Model. ViewModel містить логіку обробки запитів
Взаємодія між компонентами:
     1. Користувач ініціює дію у View (наприклад, натискає кнопку «Показати дані» у вкладці моніторингу).
     2. ViewModel отримує запит і викликає відповідні методи у Model для обробки або отримання даних.
     3. Дані, отримані з Model передаються у ViewModel.
     4. ViewModel оновлює LiveData, на яке підписаний View.
     5. View оновлює інтерфейс на основі нових даних.
     Основні модулі застосунку:
Назва модуляПризначенняMonitoringFragmentВідображення даних споживання води за вибраний період.LimitFragmentВстановлення лімітів споживання води, перегляд введених обмежень.UserActivityОсновна активність, що реалізує навігацію між вкладками, локалізацію.LocaleHelperКлас для зміни мови інтерфейсу користувача.     
     Вибір MVVM зумовлений наступними факторами:
     • Забезпечення чіткого розділення обов’язків.
     • Зручна підтримка життєвого циклу Android-компонентів.
     • Можливість повторного використання компонентів.
     • Спрощення процесу тестування ViewModel та Model.

     Мобільний застосунок розроблено на мові програмування Kotlin з використанням Android SDK. Архітектура застосунку ґрунтується на принципах MVVM, що дозволяє ефективно відокремлювати логіку від інтерфейсу користувача та забезпечувати масштабованість.
     Технології, які використовуються:
ТехнологіяПризначенняKotlinОсновна мова програмування для Android-застосунків.Android SDKНабір інструментів для розробки Android-застосунків.Jetpack ComponentsБібліотеки Android Jetpack (Fragment, ViewModel, Navigation, LiveData).XML (layout)Визначення інтерфейсу користувача.Material ComponentsСучасні елементи дизайну інтерфейсу.     
     Бізнес-логіка мобільного застосунку охоплює функціональність, що реалізує основні потреби користувача у межах системи контролю споживання води. На поточному етапі реалізовано такі функції:
     Користувач може обрати початкову та кінцеву дати за допомогою елементів DatePicker, після чого натискає кнопку «Показати дані». У відповідь система формує запит, на основі якого:
     • Фільтрується інформація за вказаний період.
     • Повертаються дані про загальне або денне споживання води.
     • Формується вивід у вигляді текстового звіту з вказаними датами.
     Функціонал вкладки «Ліміти» дозволяє:
     • Задати новий ліміт на об'єм використаної води на певну дату.
     • Перевірити, чи були перевищення лімітів.
     • Видалити встановлені ліміти з локального сховища.
     Усі дії супроводжуються повідомленнями для зворотного зв'язку, що спрощує взаємодію користувача з системою.
     Застосунок підтримує зміну мови (українська/англійська). Механізм реалізовано за допомогою LocaleHelper, що змінює Locale програми на основі вибору користувача. Усі тексти зберігаються у файлах ресурсів strings.xml, які дублюються для кожної локалі.
     Навігація між функціональними модулями здійснюється за допомогою TabLayout або BottomNavigationView. Це дозволяє зручно перемикатися між вкладками «Моніторинг» та «Ліміти».

Рисунок 1 - UML діаграма прецедентів для мобільного застосунку системи.












     Рисунок 2 - UML діаграма компонент (Component Diagram) для мобільного застосунку системи.

     Рисунок 3 - UML діаграма діяльності (Activity Diagram) для мобільного застосунку системи.

     Рисунок 4 - UML діаграма станів (State Diagram) для мобільного застосунку системи.
     
 
Рисунок 5 – Вікно авторизації та реєстрації
  
Рисунок 6 – Вікно моніторингу споживання води та лімітів












4 ВИСНОВКИ


     У ході виконання лабораторної роботи на тему «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи» було реалізовано повноцінний мобільний застосунок AquaTrack, що є складовою частиною програмної системи для контролю споживання води у приміщенні.
     У рамках роботи було:
     • Спроєктовано архітектуру мобільного застосунку із визначенням основних компонентів: активностей, фрагментів, адаптерів, допоміжних класів і ресурсів;
     • Розроблено та реалізовано програмну логіку взаємодії з інтерфейсом користувача, а також обробки бізнес-процесів (реєстрація, авторизація, моніторинг використання води, встановлення лімітів тощо);
     • Створено UML-діаграми: компонентів, діяльності та станів, що дозволяють формалізовано описати структуру, поведінку та динаміку роботи застосунку;
     Результатом лабораторної роботи є мобільний застосунок, який забезпечує користувачу зручний інтерфейс для перегляду та контролю водоспоживання у приміщенні, з можливістю встановлення лімітів і отримання поточної інформації в реальному часі. Реалізована архітектура є гнучкою, масштабованою та відповідає принципам модульності та повторного використання коду, що є важливою складовою сучасного програмного забезпечення.
     
     
     
     

ДОДАТОК А
Відеозапис


     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/k0WHDv0SeCc
     Хронологічний опис: 
     00:00 – Вступ. 
     00:19 – Реєстрація та авторизація у мобільному додатку. 
     01:18 – Моніторинг споживання води та ліміти у мобільному додатку. 
     02:10 – Висновок.



















ДОДАТОК Б
Графічні матеріали

Рисунок 1 - UML діаграма прецедентів для мобільного застосунку системи.












     Рисунок 2 - UML діаграма компонент (Component Diagram) для мобільного застосунку системи.

     Рисунок 3 - UML діаграма діяльності (Activity Diagram) для мобільного застосунку системи.

     Рисунок 4 - UML діаграма станів (State Diagram) для мобільного застосунку системи.
     
 
Рисунок 5 – Вікно авторизації та реєстрації
  
Рисунок 6 – Вікно моніторингу споживання води та лімітів












ДОДАТОК В
Програмний код


     Створені фрагменти програмного коду:
     GitHub репозиторій: https://github.com/NureKravchenkoViktoriia/apz-pzpi-22-7-kravchenko-viktoriia/tree/main/Lab5/pzpi-22-7-kravchenko-viktoriia-lab5
     
