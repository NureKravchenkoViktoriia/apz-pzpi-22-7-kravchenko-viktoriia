МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 


Кафедра «Програмна інженерія»
 



ЗВІТ
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»
на тему «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ»
 


 
Виконала:                                                           	              	Прийняв:
ст. гр. ПЗПІ-22-7                                    	       	     		Сокорчук І.П.
Кравченко В. А.






Харків 2025
1 ІСТОРІЯ ЗМІН
     
     
№ДатаВерсія звітуОпис змін та виправлень102.06.20250.1Створено розділ «Історія змін», «Завдання»203.06.20250.1Створено розділ «Опис виконаної роботи»304.06.20250.1Створено «Додаток А», закінчено розділ «Додаток Б», «Додаток В» та «Висновки»     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
2 ЗАВДАННЯ


     На лабораторній роботі №4 потрібно розробити клієнтську / front-end частину програмної системи.
     Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та забезпечувати адміністрування системи. Користувацький інтерфейс та інтерфейс адміністрування повинні підтримувати інтернаціоналізацію та локалізацію, а саме забезпечувати: підтримку різних кодових таблиць символів, обчислення та формат дати та часу, локальний та універсальний час, англійську та американську систему мір, різні напрями введення тексту тощо. Адміністрування системи повинно забезпечувати: управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт та імпорт даних та налаштувань.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
3 ОПИС ВИКОНАНОЇ РОБОТИ


     Веб-частина системи Програмної системи для контролю споживання води у приміщенні реалізована за принципом односторінкового додатку (SPA — Single Page Application), що забезпечує швидку та інтерактивну роботу користувача з системою без необхідності перезавантаження сторінки.
     UML діаграма прецедентів для веб-клієнта програмної системи AquaTrack. Діаграма прецедентів демонструє функціональні можливості веб-клієнта програмної системи AquaTrack, показуючи, як користувачі та адміністратори взаємодіють із системою через веб-інтерфейс. Вона також відображає взаємодію з IoT-пристроями через серверну частину.
     Визначення основних акторів системи:
     Користувач (User):
     • Це зареєстрований користувач системи, який входить у систему через веб-інтерфейс.
     • Має доступ до свого пристрою або пристроїв для моніторингу споживання води.
     Адміністратор (Admin):
     • Користувач з розширеними правами.
     • Відповідає за управління користувачами, системними налаштуваннями, локалізацією, резервними копіями тощо.
     IoT-пристрій (IoT Device):
     • Сенсор або лічильник, що надсилає дані на серверну частину (не взаємодіє з веб-клієнтом безпосередньо, але опосередковано є учасником сценаріїв користувача).
     Визначення прецедентів (Use Cases):
     Для Користувача:
     1. Авторизація у системі:
     • Введення електронної пошти та пароля.
     • Отримання токена доступу.
     2. Перегляд поточного споживання води:
     • Дані отримуються з серверної частини, що приймає їх від IoT-пристроїв.
     3. Перегляд історії споживання:
     • Вибір дати або періоду.
     • Показ таблиць.
     4. Встановлення/редагування лімітів:
     • Можливість зафіксувати дозволене споживання на день/тиждень/місяць.
     • Отримання повідомлень у разі перевищення.
     5. Отримання сповіщень:
     • Виведення системних сповіщень (перевищення, відключення пристрою).
     6. Зміна мови інтерфейсу:
     • Перемикання між українською та англійською.
     Для Адміністратора:
     1. Авторизація у системі:
     • Вхід до адміністративного розділу.
     2. Управління користувачами:
     • Перегляд списку користувачів.
     • Додавання, редагування, видалення користувачів.
     • Призначення ролей.
     3. Адміністрування пристроїв:
     • Призначення пристроїв.
     • Перевірка статусу IoT-пристроїв.
     4. Підтримка локалізації
     • Додавання/редагування мовних файлів.
     5. Резервне копіювання та відновлення даних
     • Ініціація збереження резервної копії бази.
     • Відновлення з копії у випадку збою.
     Для IoT-пристрою:
     1. Надсилання показників споживання:
     • В автоматичному або заданому інтервалі.
     • Передача об'єму води, дати, ID пристрою.
     

Рисунок 1 - UML діаграма прецедентів для веб клієнта системи.

     UML діаграма компонентів описує логічну структуру застосунку як набір взаємопов’язаних компонентів, кожен з яких реалізує окрему функціональність або набір функцій.
     У випадку веб-клієнта AquaTrack, компоненти будуть представлені у вигляді:
     • сторінок (Pages)
     • компонентів (Components)
     • утиліт (Utilities)
     • зовнішніх API (наприклад, i18n, axios)
     • маршрутизації
     • локального сховища (LocalStorage)
     Основні компоненти веб-клієнта AquaTrack:
Назва компонентаТипОписAppГоловний компонентОсновний роутер застосункуLoginPageСторінкаФорма логіну з переходами та API-запитамиRegisterСторінкаФорма реєстрації UserPageСторінкаІнтерфейс користувача з вкладками: моніторинг і лімітиAdminPageСторінкаСторінка адміністратора LanguageToggleКомпонентПеремикач мовиi18n.jsУтилітаНалаштування локалізації (i18next)axiosБібліотекаВикористовується для HTTP-запитівLocalStorageУтиліта браузераЗберігання userId, role, usernamereact-router-domБібліотекаОрганізація навігації між сторінками
Рисунок 2 - UML діаграма компонентів для веб клієнта системи.

     App – центральний компонент, підключає маршрути та навігацію. Є коренем для всіх сторінок.
     LoginPage – компонент для логіну. Має зв’язки з:
     • axios — для API-запиту
     • LocalStorage — для збереження токенів користувача
     • i18n — для локалізації
     UserPage – універсальний компонент користувача:
     • Збирає дані по воді (/water-usage/history)
     • Створює/видаляє ліміти (/limits/create, /limits/delete/{id})
     • Має вкладки: моніторинг та ліміти
     • Працює з LocalStorage (userId, role)
     • Використовує i18n для перемикання мов
     LanguageToggle – малий UI-компонент, який дозволяє перемикати мову з i18next.
     i18n.js – файл конфігурації локалізації, працює через i18next + react-i18next.
     Використані зовнішні бібліотеки (важливі компоненти):
     • axios — HTTP клієнт для комунікації з API
     • react-router-dom — для маршрутизації між сторінками
     • i18next, react-i18next — для підтримки багатомовності
     • LocalStorage — браузерний API
     

Рисунок 3 - UML діаграма діяльності для веб клієнта системи.
     
Рисунок 4 - UML діаграма станів для веб клієнта системи.
     
     Основні архітектурні особливості:
     1. Компонентний підхід
     • Уся веб-логіка розбита на незалежні, багаторазові компоненти React, кожен з яких відповідає за окрему частину інтерфейсу або функціональності.
     • Компоненти мають власний стан (state) і можуть отримувати параметри (props) від батьківських компонентів, що сприяє чистоті та повторному використанню коду.
     2. Управління станом
     • Локальний стан кожного компонента управляється за допомогою React-хука useState.
     • Для побічних ефектів, таких як завантаження даних з сервера при зміні вкладок або на початку роботи компонента, використовується хук useEffect.
     • Для міжкомпонентної взаємодії використовується підняття стану (lifting state up) або контекст, якщо потрібно (наявні локальні стани в компоненті AdminPage).
     3. Роутинг
     • У системі реалізовано вкладки (tabs), які динамічно змінюють відображення різних частин інтерфейсу (користувачі, пристрої).
     • Перемикання між вкладками відбувається без перезавантаження сторінки.
     4. Комунікація з сервером
     • Для обміну даними з серверною частиною використовується бібліотека axios, що реалізує HTTP-запити (GET, POST, PUT, DELETE).
     • Запити відправляються до REST API серверної частини для отримання та зміни даних (користувачі, пристрої).
     • Обробка помилок передбачена за допомогою блоків try/catch та показу користувачу відповідних повідомлень.
     5. Локалізація
     • Інтерфейс підтримує багатомовність завдяки бібліотеці react-i18next.
     • Тексти, підказки та повідомлення динамічно підміняються відповідно до вибраної мови (українська та англійська).
     • Мова вибирається динамічно і може змінюватись за допомогою кнопки.
     6. Стилізація
     • Використовується CSS-модулі або окремі CSS-файли (AdminPage.css), які визначають зовнішній вигляд компонентів (таблиці, кнопки, форми).
     • Стилі адаптовані під сучасні вимоги UI/UX, забезпечуючи зручність та інтуїтивність інтерфейсу.
     Використані програмні технології та компоненти:
     Технології:
     • React.js
     o Фреймворк для побудови інтерфейсів користувача.
     o Забезпечує декларативний підхід до створення UI, компонентний розподіл коду.
     • Використовуються функціональні компоненти з хуками (useState, useEffect). React Hooks (useState, useEffect) — для управління станом та побічними ефектами.
     • Axios
     o HTTP-клієнт для виконання REST-запитів до бекенд API.
     o Підтримує асинхронні операції, обробку помилок.
     • react-i18next
     o Бібліотека для локалізації інтерфейсу.
     o Забезпечує багатомовність і динамічну зміну мови інтерфейсу.
     • CSS
     o Використовується для стилізації сторінки.
     o Забезпечує гнучке та привабливе оформлення UI.
     Основні компоненти веб-частини:
     1. AdminPage
     • Головний компонент сторінки адміністратора.
     • Містить логіку перемикання вкладок між розділами:
     o Користувачі — відображення таблиці з користувачами, можливість видаляти користувачів, змінювати їх ролі.
     o Пристрої — форма для реєстрації нового IoT-пристрою (вибір типу, статусу) і таблиця пристроїв з можливістю їх видалення.
     • Управляє локальним станом списків користувачів та пристроїв, а також формами для введення даних.
     • Виконує завантаження даних з сервера через axios і відправку запитів для додавання, зміни або видалення даних.
     • Забезпечує локалізацію інтерфейсу за допомогою функції t із бібліотеки i18next.
     • Містить кнопку перемикання мови між українською та англійською.
     2. UserPage
     Функціонал залежить від ролі користувача і включає:
     Сторінка реєстрації користувача:
     • Поля для введення:
     o Ім’я користувача.
     o Електронна пошта.
     o Пароль.
     • Кнопки:
     o Зареєструватись — відправляє дані на сервер для створення нового облікового запису.
     o Повернутись до сторінки логіна — переходить на сторінку авторизації.
     o Перемикач мови — кнопка для зміни мови інтерфейсу (українська/англійська).
     Сторінка авторизації (логін):
     • Поля для введення:
     o Електронна пошта.
     o Пароль.
     • Кнопки:
     o Увійти — надсилає запит на сервер для перевірки облікових даних і входу в систему.
     o Реєстрація — посилання або кнопка для переходу на сторінку реєстрації.
     o Перемикач мови — кнопка для зміни мови інтерфейсу.
     3. Сторінка користувача (роль користувача):
     Моніторинг використання води
     • Користувач має можливість обрати:
     o Початкову дату.
     o Кінцеву дату.
     • Після вибору дат і натискання кнопки відображаються відповідні дані про споживання води.
     • Кнопка для зміни мови інтерфейсу.
     Ліміти використання води
     • Поля для введення:
     o Початкова дата.
     o Кінцева дата.
     o Кількість води (ліміт).
     o Номер пристрою.
     • Кнопки:
     o Створити ліміт — додає новий ліміт у систему.
     o Видалити ліміт — видаляє вибраний ліміт.
     o Кнопка для перемикання мови інтерфейсу.
     • Поле відображення даних (наприклад, таблиця або список) з інформацією про ліміти.
     Переваги такої архітектури:
     • Модульність: компоненти легко тестувати, змінювати і повторно використовувати.
     • Відокремлення логіки: логіка бізнес-процесів і UI розділені, що полегшує супровід і розширення функціоналу.
     • Адаптивність: підтримка багатомовності дає можливість легко додавати нові локалізації.
     • Покращений користувацький досвід: SPA забезпечує швидке реагування інтерфейсу без перезавантажень.
     • Масштабованість: архітектура дозволяє додавати нові сторінки, функції та вкладки без значних змін у коді.
     
     Бізнес-логіка веб-частини програмної системи:
     1. Реєстрація користувача:
     • Валідація введених даних:
     o Перевірка коректності електронної пошти (формат email).
     o Перевірка мінімальної довжини пароля.
     o Переконання, що всі обов’язкові поля заповнені (ім’я, email, пароль).
     • Взаємодія з сервером:
     o Після успішної валідації дані відправляються через HTTP POST запит на серверну частину для створення нового користувача.
     o Сервер повертає результат операції (успішно/помилка).
     • Обробка відповіді:
     o Якщо реєстрація успішна, користувач отримує повідомлення про успіх і автоматично або вручну переходить на сторінку авторизації.
     o Якщо сталася помилка (наприклад, email уже зареєстрований), відображається відповідне повідомлення.
     2. Авторизація користувача (вхід в систему):
     • Валідація введених даних:
     o Перевірка заповнення полів email і пароля.
     • Взаємодія з сервером:
     o Відправка HTTP POST запиту з обліковими даними на сервер для перевірки.
     • Обробка відповіді:
     o Якщо логін і пароль коректні, сервер повертає токен автентифікації (JWT або сесію).
     o Токен зберігається на стороні клієнта (наприклад, у localStorage).
     o На основі ролі користувача (адмін або користувач) виконується перехід на відповідну сторінку.
     o Якщо дані неправильні — виводиться помилка.
     3. Моніторинг використання води (для ролі користувача):
     • Вибір періоду:
     o Користувач обирає початкову і кінцеву дату.
     o Валідація: початкова дата не може бути більшою за кінцеву.
     • Завантаження даних:
     o Після вибору дат відправляється GET-запит до сервера з параметрами періоду.
     o Сервер повертає дані про споживання води за вказаний період (об’єм, час, пристрій).
     • Відображення даних:
     o Отримані дані виводяться у вигляді таблиці.
     • Обробка помилок:
     o Якщо дані не знайдені або сталася помилка, користувач отримує повідомлення.
     4. Управління лімітами використання води (для ролі користувача):
     • Створення нового ліміту:
     o Користувач вводить:
     * Початкову дату.
     * Кінцеву дату.
     * Кількість води (ліміт).
     * Номер пристрою.
     o Валідація полів (коректність дат, числове значення ліміту, заповненість).
     o Відправка POST-запиту на сервер з даними нового ліміту.
     o Сервер повертає результат операції.
     • Перевірка існуючих лімітів:
     o Користувач натискає кнопку для отримання списку лімітів.
     o Відправляється GET-запит з параметрами фільтрації (наприклад, дата).
     o Сервер повертає список лімітів.
     o Відображення лімітів у таблиці.
     • Видалення ліміту:
     o Користувач вибирає ліміт і натискає кнопку видалення.
     o Відправляється DELETE-запит до сервера.
     o Після успішного видалення список оновлюється.
     • Обробка помилок:
     o Якщо операція не вдалася, користувачу показується відповідне повідомлення.
     5. Управління користувачами (для ролі адміністратора):
     • Завантаження списку користувачів:
     o Під час завантаження сторінки відбувається GET-запит для отримання списку користувачів.
     o Дані зберігаються у стані компонента.
     • Зміна ролі користувача:
     o Адміністратор вибирає користувача зі списку.
     o Вибирає нову роль (наприклад, користувач або адміністратор).
     o Відправляє PATCH/PUT-запит на сервер для оновлення ролі.
     o Після успіху оновлює локальний стан.
     • Видалення користувача:
     o Адміністратор натискає кнопку видалення.
     o Відправляється DELETE-запит.
     o Після успішного видалення список оновлюється.
     • Обробка помилок і повідомлення:
     o В разі помилок користувач отримує відповідні повідомлення.
     6. Управління пристроями (для ролі адміністратора):
     • Реєстрація нового IoT-пристрою:
     o Адміністратор вводить тип пристрою та його статус.
     o Дані проходять валідацію.
     o Відправляється POST-запит для створення нового пристрою.
     o Після успіху оновлюється список пристроїв.
     • Видалення пристрою:
     o Адміністратор вибирає пристрій для видалення.
     o Відправляється DELETE-запит.
     o Список оновлюється після успішного видалення.
     7. Перемикання мови інтерфейсу:
     • Користувач може перемикати мову інтерфейсу між українською та англійською за допомогою кнопки.
     • Локалізація реалізована за допомогою react-i18next.
     • При зміні мови компоненти оновлюються, і весь текст в інтерфейсі відображається обраною мовою.
     • Вибрана мова може зберігатися у localStorage для збереження вибору при наступних візитах.
     8. Загальна обробка помилок:
Веб-частина містить логіку для:
     • Відлову помилок при мережевих запитах.
     • Відображення користувачеві дружніх повідомлень про помилки (напр., “Сервер недоступний”, “Некоректні дані”).
     • Запобігання повторним відправкам при виконанні операцій.
     • Валідація форм на клієнтському рівні для підвищення якості введених даних.
     Переваги такої бізнес-логіки:
     • Забезпечує коректність і цілісність даних ще на клієнтському рівні.
     • Зменшує навантаження на сервер завдяки попередній валідації.
     • Підвищує зручність користувача завдяки швидкій зворотній реакції.
     • Забезпечує чітке розмежування прав і функціоналу між ролями.
     • Полегшує підтримку та розвиток завдяки модульній структурі та відокремленій логіці.
     
     Захист даних у веб-частині програмної системи:
     1. Основні механізми захисту
     1.1. Аутентифікація та авторизація
     • Вхід у систему здійснюється через форму авторизації, де користувач вводить логін (email) і пароль.
     • Пароль ніколи не зберігається у відкритому вигляді на клієнті чи сервері.
     • Після успішного входу сервер повертає JWT (JSON Web Token) або унікальний сесійний токен.
     • Сервер перевіряє валідність токена та визначає права користувача.
     • Різні ролі (адміністратор, користувач) мають різний рівень доступу до API та UI.
     1.2. Валідація і фільтрація даних
     • Всі дані, введені користувачем, проходять клієнтську валідацію (формати, обов’язкові поля, типи).
     • Сервер проводить повторну валідацію (бекенд завжди не довіряє клієнту).
     • Запобігання ін’єкціям (SQL, NoSQL, XSS) через санітизацію та екранування вхідних даних.
     1.3. Шифрування
     • Веб-додаток працює виключно через HTTPS, що забезпечує захищене шифрування трафіку між клієнтом і сервером.
     • Паролі передаються тільки у хешованому вигляді на сервері, де зберігаються із застосуванням надійних алгоритмів (bcrypt, Argon2).
     1.4. Обробка помилок
     • Відсутність виведення на клієнт подробиць внутрішніх помилок серверу (щоб уникнути витоку інформації).
     • Логування подій безпеки та спроб несанкціонованого доступу на сервері.
     
     Взаємодія веб-частини програмної системи з іншими компонентами:
     2. Архітектура взаємодії
     2.1. Комунікація з серверною частиною
     • Веб-частина відправляє HTTP-запити (REST API) для отримання/запису даних.
     • Запити містять у заголовках токени авторизації для підтвердження прав користувача.
     • Сервер відповідає структурованими даними (JSON), які обробляються на клієнті.
     • Веб-частина реагує на відповіді сервера, оновлює інтерфейс і локальний стан.
     2.2. Взаємодія з IoT-пристроями через серверну частину
     • Веб-додаток отримує через сервер інформацію з IoT-пристроїв (датчики води, пристрої лімітів).
     • Сервер збирає, агрегує, фільтрує і передає ці дані веб-інтерфейсу.
     • У випадку аварій або критичних подій веб-частина може отримувати повідомлення (push або через WebSocket) від сервера.
     2.3. Інтеграція з базою даних
     • Прямої взаємодії з базою даних немає (через безпеку).
     • Веб-частина працює виключно через API серверної частини.
     • Всі операції CRUD проходять валідацію і контроль ролей на сервері.
     
     3. Реалізовані у веб-частині системи варіанти локалізації
     3.1. Підтримка багатомовності
     • Веб-додаток підтримує принаймні дві мови: українську та англійську.
     • Використовується бібліотека локалізації react-i18next.
     3.2. Механізм перемикання мови
     • Користувач може вручну переключати мову через інтерфейс (кнопка).
     • Вибрана мова миттєво застосовується до всього інтерфейсу (тексти, повідомлення, підказки).
     3.3. Структура перекладів
     • Підтримка динамічної локалізації — можливість змінювати мову без перезавантаження сторінки.

     4. Функціональність для налаштування та адміністрування програмної системи у веб-частині
     4.1. Управління користувачами
     • Адміністратор має доступ до списку всіх користувачів.
     • Можливість додавання нових користувачів (вручну або через імпорт).
     • Зміна ролей користувачів (адмін, звичайний користувач).
     • Видалення або блокування користувачів.
     4.2. Керування пристроями та IoT
     • Адмін може додавати нові пристрої (вказувати тип, статус, ідентифікатори).
     • Відключення/видалення пристроїв.
     • Перегляд статусу та статистики роботи пристроїв.
     4.3. Налаштування системних параметрів
     • Конфігурація лімітів споживання води за замовчуванням.
     • Управління мовами та локалізацією (додавання нових мов, зміна текстів).
     • Встановлення ролей та прав доступу (розширене налаштування ролей).


Рисунок 5 – Вікно авторизації у веб клієнті.

Рисунок 6 – Вікно реєстрації у веб клієнті.

Рисунок 7 – Вікно моніторингу використання води у веб клієнті.

Рисунок 8 – Вікно лімітів у веб клієнті.

Рисунок 9 – Вікно керування адміністратора у веб клієнті(Керування користувачами).

Рисунок 10 – Вікно керування адміністратора у веб клієнті(Керування IoT девайсами).

     Вікна зі зміненою мовою:

Рисунок 11 – Вікно авторизації у веб клієнті зі зміненою мовою.

Рисунок 12 – Вікно реєстрації у веб клієнті зі зміненою мовою.

Рисунок 13 – Вікно моніторингу використання води у веб клієнті зі зміненою мовою.

Рисунок 14 – Вікно лімітів у веб клієнті зі зміненою мовою.

Рисунок 15 – Вікно керування адміністратора у веб клієнті зі зміненою мовою(Керування користувачами).

Рисунок 16 – Вікно керування адміністратора у веб клієнті зі зміненою мовою (Керування IoT девайсами).
     
     Було розроблено інтерфейс та логіку додаток WinForms для реєстрації нових користувачів у програмній системі контролю споживання води у приміщенні «AquaTrack»:
Інтерфейс:
     • Вікно включає поля для введення даних: ім’я користувача, електронна пошта, пароль.
     • Кнопки «Зареєструватись», «Повернутись» для повернення на сторінку авторизації, «Укр/Англ» для зміни мови на сторінці.
     • Реалізовано валідацію даних. 
Логіка:
     • При натисканні кнопки «Зареєструвати» відбувається перевірка даних на стороні клієнта.
     • Дані передаються на сервер для обробки.
     • Реалізовано обробку успішної реєстрації або виведення повідомлення про помилку у випадку некоректних даних.

Рисунок 17 – Вікно реєстрації у додатку WinForms.

     Розроблено вікно авторизації, яке дозволяє користувачам увійти до системи:
Інтерфейс:
     • Поля для введення електронної пошти та пароля.
     • Кнопка «Увійти» для авторизації та кнопка «Укр/Англ» для зміни мови на сторінці. 
     • Клікабельний напис «Реєстрація», який відкриває вікно реєстрації.
Логіка:
     • Перевірка введених даних.
     • Відправлення запиту на сервер для підтвердження даних користувача.
     • Реалізовано обробку успішного входу (перехід до вікна користувача або адміністратора) або виведення повідомлення про невірні дані.

Рисунок 18 – Вікно авторизації у додатку WinForms.
     
     Створено вікно для звичайного користувача на якому ми можемо бачити історію використання води за різні періоди, також поточне використання води. Керування лімітами та отримання сповіщення про перевищення ліміту. 
     Інтерфейс та логіка забезпечують виконання наступних функцій:
Моніторинг історії використання води за різні періоди:
     • Додано можливість вибору періоду за допомогою полів DateTimePicker (початкова та кінцева дати).
     • Кнопка «Показати дані» виводить таблицю використання води за обраний період.
Відображення поточного використання води:
     • Додано індикатор реального часу, що постійно оновлюється.
Керування лімітами:
     • Можливість додавати, перевіряти(перевірка чи перевищено було ліміт) та видаляти ліміти.
     • Відображення списку лімітів у таблиці.
Сповіщення про перевищення ліміту:
     • Реалізовано функцію виведення повідомлення у разі перевищення встановленого ліміту.

Рисунок 19 – Вікно моніторингу використання води у додатку WinForms.


Рисунок 20 – Вікно лімітів у додатку WinForms.

     Створено вікно для адміністратора на якій аднімістратор може керувати користувачами та пристроями. Створювати резервну копію. 
     Функціонал адміністратора включає:
Керування користувачами:
     • Додано можливість змінювати роль користувача та видаляти існуючих.
     • Список користувачів відображається у вигляді таблиці з можливістю сортування.
Керування пристроями:
     • Адміністратор може додавати або видаляти.
     • Відображення інформації про пристрої у таблиці.
Створення резервної копії:
     • Додано кнопку для створення резервної копії бази даних.
     • Резервна копія зберігається у визначеному місці локально.
     

Рисунок 21 – Вікно керування адміністратора у додатку WinForms.

     Вікна зі зміненою мовою:

Рисунок 22 – Вікно адміністратора зі зміненою мовою у додатку WinForms.

Рисунок 23 – Вікно моніторингу використання води зі зміненою мовою у додатку WinForms.


Рисунок 24 – Вікно лімітів зі зміненою мовою у додатку WinForms.


Рисунок 25 – Вікно авторизації зі зміненою мовою у додатку WinForms.


Рисунок 26 – Вікно реєстрації зі зміненою мовою у додатку WinForms.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
4 ВИСНОВКИ


     У ході виконання роботи було реалізовано повний функціонал системи AquaTrack, орієнтованої на різні типи користувачів: звичайного користувача та адміністратора. Зокрема, було виконано наступне:
     1. Розробка інтерфейсу для користувачів різних ролей:
     Створено зручні та зрозумілі вікна для реєстрації, авторизації, роботи з історією використання води, керування лімітами, перегляду даних у реальному часі. Забезпечено чітке розмежування функцій для звичайного користувача (моніторинг та керування лімітами) та адміністратора (керування користувачами та пристроями).
     2. Розробка функціональності для звичайного користувача:
     Реалізовано можливість моніторингу використання води за різні періоди часу, що дозволяє користувачам аналізувати своє споживання. Додано інструмент для керування лімітами з автоматичним сповіщенням про перевищення, що сприяє раціональному використанню ресурсу.
     3. Розробка функціональності для адміністратора:
     Надано можливість адміністрування користувачів та пристроїв системи, що підвищує керованість та гнучкість у налаштуванні. Реалізовано функцію створення резервної копії даних для забезпечення їхньої безпеки та можливості відновлення у разі втрати.
     4. Забезпечення локалізації:
     Додано функцію зміни мови, що дозволяє адаптувати інтерфейс для різних груп користувачів, забезпечуючи зручність використання незалежно від мовних уподобань.
     5. Інтеграція функцій у єдину систему:
     Всі розроблені компоненти інтегровано в єдину програму, що забезпечує їхню безперебійну взаємодію та відповідність вимогам проекту.
     Результатом роботи є функціональна, зручна та масштабована система, яка відповідає сучасним вимогам до систем моніторингу та керування ресурсами. Реалізований функціонал демонструє високу практичну цінність проекту, дозволяючи користувачам ефективно контролювати споживання води, а адміністраторам — керувати системою.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК А
Відеозапис


     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/Xse6AfnXqMg 
     Хронологічний опис: 
     00:00 – Вступ. 
     00:12 – Реєстрація та авторизація у веб клієнті. 
     00:56 – Моніторинг споживання води та ліміти у веб клієнті. 
     02:20 – Функціонал адміністратора у веб клієнті. 
     03:40 – Реєстрація та авторизація у додатку WinForms. 
     04:16 – Моніторинг споживання води та ліміти у додатку WinForms. 
     07:05 – Функціонал адміністратора у додатку WinForms. 
     09:15 – Висновок.
















ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 - UML діаграма прецедентів для веб клієнта системи.

Рисунок Б.2 - UML діаграма компонентів для веб клієнта системи.

Рисунок Б.3 - UML діаграма діяльності для веб клієнта системи.
     
Рисунок Б.4 - UML діаграма станів для веб клієнта системи.

Рисунок Б.5 – Вікно авторизації у веб клієнті.


Рисунок Б.6 – Вікно реєстрації у веб клієнті.

Рисунок Б.7 – Вікно моніторингу використання води у веб клієнті.


Рисунок Б.8 – Вікно лімітів у веб клієнті.

Рисунок Б.9 – Вікно керування адміністратора у веб клієнті(Керування користувачами).


Рисунок Б.10 – Вікно керування адміністратора у веб клієнті(Керування IoT девайсами).

     
Рисунок Б.11 – Вікно авторизації у веб клієнті зі зміненою мовою.


Рисунок Б.12 – Вікно реєстрації у веб клієнті зі зміненою мовою.

Рисунок Б.13 – Вікно моніторингу використання води у веб клієнті зі зміненою мовою.

Рисунок Б.14 – Вікно лімітів у веб клієнті зі зміненою мовою.

Рисунок Б.15 – Вікно керування адміністратора у веб клієнті зі зміненою мовою(Керування користувачами).

Рисунок Б.16 – Вікно керування адміністратора у веб клієнті зі зміненою мовою (Керування IoT девайсами).

Рисунок Б.17 – Вікно реєстрації у додатку WinForms.


Рисунок Б.18 – Вікно авторизації у додатку WinForms.

Рисунок Б.19 – Вікно моніторингу використання води у додатку WinForms.


Рисунок Б.20 – Вікно лімітів у додатку WinForms.

Рисунок Б.21 – Вікно керування адміністратора у додатку WinForms.


Рисунок Б.22 – Вікно адміністратора зі зміненою мовою у додатку WinForms.

Рисунок Б.23 – Вікно моніторингу використання води зі зміненою мовою у додатку WinForms.


Рисунок Б.24 – Вікно лімітів зі зміненою мовою у додатку WinForms.


Рисунок Б.25 – Вікно авторизації зі зміненою мовою у додатку WinForms.


Рисунок Б.26 – Вікно реєстрації зі зміненою мовою у додатку WinForms.




ДОДАТОК В
Програмний код


     Створені фрагменти програмного коду:
     GitHub репозиторій: https://github.com/NureKravchenkoViktoriia/apz-pzpi-22-7-kravchenko-viktoriia/tree/main/Lab4/pzpi-22-7-kravchenko-viktoriia-lab4
     
